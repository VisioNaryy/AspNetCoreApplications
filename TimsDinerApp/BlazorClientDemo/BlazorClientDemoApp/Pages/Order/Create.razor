@page "/Order/Create"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Create</h3>

@if (!string.IsNullOrEmpty(errorString))
{
    <h4>System Error</h4>
    <p>@errorString</p>
}
else if (!foodItems.Any())
{
    <h4>Loading...</h4>
}
else
{
    <EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@order" />
        <div class="form-group">
            <label class="control-label">Item to Order</label>
            <InputSelect @bind-Value="order.FoodId" class="form-control">
                <option value="">Select a meal...</option>
                @foreach (var foodItem in foodItems)
                    {
                    <option value="@foodItem.Id">@foodItem.Title</option>
                    }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="control-label">Quantity</label>
            <InputNumber @bind-Value="order.Quantity" class="form-control"></InputNumber>
            <ValidationMessage For="@(() => order.Quantity)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <label class="control-label">Order Name</label>
            <InputText @bind-Value="order.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(() => order.OrderName)" class="text-danger"></ValidationMessage>
        </div>
        <div class="form-group">
            <input type="submit" value="Order Food" class="btn btn-primary" />
        </div>
    </EditForm>
}

@code {
    private Order order = new Order();
    private List<Food> foodItems = new List<Food>();
    private string errorString;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var response = await httpClient.GetAsync("api/food/get");

            if (response.IsSuccessStatusCode)
            {
                foodItems = await response.Content.ReadFromJsonAsync<List<Food>>();
            }
            else
            {
                errorString = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        var foodItemPrice = foodItems.Where(x => x.Id == order.FoodId).FirstOrDefault()?.Price;

        order.Total = order.Quantity * (foodItemPrice ??= 0);

        try
        {
            var response = await httpClient.PostAsJsonAsync("api/order/create", order);

            if (response.IsSuccessStatusCode)
            {
                var content = response.Content.ReadFromJsonAsync<OrderCreateResponse>();

                order = new Order();
                //navigationManager.NavigateTo($"order/display/{orderCreateResponse.Id}");
            }
            else
            {
                errorString = response.ReasonPhrase;
            }
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }
    }
}
